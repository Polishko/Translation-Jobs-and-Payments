# the details function:
This function prepares the search criteria to look for in the emails
The entered date is converted to the required format
The exception handled here is double handled in the final email_processing function, but ChatGPT suggested leaving it here as well, as  defensive programming check

# the extract_info function:
This function serves to extract the necessary information
mail: the mail object that represents the email message,
the email.message.Message class in email module provides a dictionary like interface and headers contain key value pairs for sender, receiver etc.
1st check: if the mail subject contains "RE:" (case-insensitive), the email is ignored --> this part is used to ignore the reply emails to avoid repetitive information extraction.
The loop: walks in the email and extracts the due date info which contains the needed line from email body: related searched words in Turkish are 'teslim', 'teslim tarihi'
The email in the email library is represented in a tree like structure consisting
of parts and the walk iterates over these parts (body, html, attachment etc.)
The utf-8 decoding is needed because the email usually contains non-english Turkish characters that create problem during conversion to lowercase characters.
Only the relevant lines containing the keywords are extracted. re.UNICODE ensures
proper catching of non-english characters like the İ in TESLİM.
The check is added to look if the subject contains "REV" (case-insensitive) because
some emails contain more than one due date info; one for translator and one for reviewer. The true due date for the job is the review date. These emails contain REV in the subject line. For these emails, the final occurrence of due date is extracted.
The conditional check for the sender email extraction was suggested by ChatGPT. Since sometimes mails are enclosed in <>, the conditional case was used to omit <> if present.
The final check is to see if the due date information is present.


# the process_email_list function:
items: is the list of email id's obtained from IMAP server
m is the IMAP4 object that is used to interact with the mail server or the connection object created in the process_emails function
resp is the response from the server, data is mail data and RFC822 is a retrieval option, means fetch the entire mail in original format
mail = email.message_from_bytes(email_body) creates an email.message.Message object from a bytes-like object
After setting these, the extract_info fnct is applied to the mail object.
If the extracted info is not None then the information is collected in key value pairs and saved in a list which is finally returned, otherwise the list remains empty.

# the process_emails function:
Here the necessary variables for connection and login to the email account are set. The connection m is initialized outside the connection try block for proper cleanup in the finally block.
m = imaplib.IMAP4_SSL(url, 993) # establishes connection with the server
m.login(un, pw) # logins to the specified account
m.select() # when no folder name is provided the default is the inbox.
The user is prompted to enter a date.
If no date is provided, the current date is taken.
If valid date provided, the entered date is converted to the required format.
If the entered date is valid, the cycle is broken and the information goes as an input to the details function together with the domain information. If the search criteria returned is not none, the function proceeds to search in the email using the returned search criteria.
resp, items = m.search(None, search_criteria) # None indicates entire mailbox should be searched.
resp is server response code, items is string with mail ids
items = items[0].split() is a list of mail ids
The extracted information goes as an input to the process_email_list function.
Exception handling is used in case there is error during interaction with the server.
m.logout() closes the connection with the email server.
If the extracted list is none or empty, a message informs the user that no jobs are found for the entered date.
Otherwise, the information is saved as a txt file (with the file name indicating the searched date) in the parent working directory. The encoding setting used for the file writing again handles the non-English characters properly.